{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\dev_v\\\\Desktop\\\\INSTAGRAM\\\\clone\\\\components\\\\Main.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"./redux/actions/index\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport FeedScreen from \"./main/Feed\";\nimport ProfileScreen from \"./main/Profile\";\nvar Tab = createBottomTabNavigator();\n\nvar EmptyScreen = function EmptyScreen() {\n  return null;\n};\n\nexport var Main = function (_Component) {\n  _inherits(Main, _Component);\n\n  var _super = _createSuper(Main);\n\n  function Main() {\n    _classCallCheck(this, Main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchUser();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var currentUser = this.props.currentUser;\n      console.log(currentUser);\n\n      if (currentUser == undefined) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 18\n          }\n        });\n      }\n\n      return React.createElement(Tab.Navigator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"Feed\",\n        component: FeedScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref) {\n            var color = _ref.color,\n                size = _ref.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"home\",\n              color: color,\n              size: 26,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 37\n              }\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"MainAdd\",\n        component: EmptyScreen,\n        listener: function listener(_ref2) {\n          var navigations = _ref2.navigations;\n\n          tabPress: (function (event) {\n            event.preventDefault();\n            navigation.navigate(\"Add\");\n          });\n        },\n        options: {\n          tabBarIcon: function tabBarIcon(_ref3) {\n            var color = _ref3.color,\n                size = _ref3.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"plus-box\",\n              color: color,\n              size: 26,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref4) {\n            var color = _ref4.color,\n                size = _ref4.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"account-circle\",\n              color: color,\n              size: 26,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 37\n              }\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nvar mapStateProps = function mapStateProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser\n  }, dispatch);\n};\n\nexport default connect(mapStateProps, mapDispatchProps)(Main);","map":{"version":3,"sources":["C:/Users/dev_v/Desktop/INSTAGRAM/clone/components/Main.js"],"names":["React","Component","MaterialCommunityIcons","connect","bindActionCreators","fetchUser","createBottomTabNavigator","FeedScreen","ProfileScreen","Tab","EmptyScreen","Main","props","currentUser","console","log","undefined","tabBarIcon","color","size","navigations","tabPress","event","preventDefault","navigation","navigate","mapStateProps","store","userState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons'\r\n\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators} from \"redux\"\r\nimport {fetchUser} from \"./redux/actions/index\"\r\nimport {createBottomTabNavigator} from \"@react-navigation/bottom-tabs\"\r\n\r\nimport FeedScreen from \"./main/Feed\"\r\nimport ProfileScreen from \"./main/Profile\"\r\n\r\nconst Tab = createBottomTabNavigator()\r\n\r\nconst EmptyScreen = () => {\r\n    return null\r\n}\r\nexport class Main extends Component {\r\n\r\ncomponentDidMount(){\r\nthis.props.fetchUser()\r\n\r\n}\r\n\r\n    render(){\r\n      \r\n      const {currentUser} = this.props\r\n      console.log(currentUser);\r\n\r\n      if (currentUser == undefined) {\r\n          return <View></View>\r\n        }\r\n\r\n        return (\r\n            <Tab.Navigator>\r\n                <Tab.Screen name=\"Feed\" component={FeedScreen}\r\n                            options={{\r\n                                tabBarIcon: ({ color, size }) => (\r\n                                    <MaterialCommunityIcons name=\"home\" color={color} size={26} />\r\n                                ),\r\n                            }} />\r\n                <Tab.Screen name=\"MainAdd\" component={EmptyScreen}\r\n                listener={({navigations})=> {\r\n                    tabPress: event => {\r\n                        event.preventDefault()\r\n                        navigation.navigate(\"Add\")\r\n                    }\r\n                }}\r\n                            options={{\r\n                                tabBarIcon: ({ color, size }) => (\r\n                                    <MaterialCommunityIcons name=\"plus-box\" color={color} size={26} />\r\n                                ),\r\n                            }} />\r\n                <Tab.Screen name=\"Profile\" component={ProfileScreen}\r\n                            options={{\r\n                                tabBarIcon: ({ color, size }) => (\r\n                                    <MaterialCommunityIcons name=\"account-circle\" color={color} size={26} />\r\n                                ),\r\n                            }} />\r\n            </Tab.Navigator>\r\n       \r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateProps = (store) => ({\r\n    currentUser: store.userState.currentUser\r\n})\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({fetchUser}, dispatch)\r\n\r\nexport default connect(mapStateProps, mapDispatchProps)(Main)"]},"metadata":{},"sourceType":"module"}